apiVersion: v1
data:
  config.river: |
    logging {
      level  = "debug"
      format = "logfmt"
    }

    // Discovery
    // ---------
    discovery.kubernetes "pods" {
      role = "pod"
    }

    discovery.kubernetes "endpoints" {
      role = "endpoints"
    }

    discovery.kubernetes "nodes" {
      role = "node"
    }

    // -------
    // Metrics
    // -------

    // cAdvisor
    discovery.relabel "metrics_cadvisor" {
      targets = discovery.kubernetes.nodes.targets

      rule {
        action = "replace"
        target_label = "__address__"
        replacement = "kubernetes.default.svc.cluster.local:443"
      }

      rule {
        source_labels = ["__meta_kubernetes_node_name"]
        regex = "(.+)"
        action = "replace"
        replacement = "/api/v1/nodes/${1}/proxy/metrics/cadvisor"
        target_label = "__metrics_path__"
      }
    }

    prometheus.scrape "cadvisor" {
      scheme = "https"
      tls_config {
          server_name = "kubernetes"
          ca_file = "/var/run/secrets/kubernetes.io/serviceaccount/ca.crt"
          insecure_skip_verify = false
      }
      bearer_token_file = "/var/run/secrets/kubernetes.io/serviceaccount/token"
      targets = discovery.relabel.metrics_cadvisor.output
      scrape_interval = "60s"
      forward_to = [prometheus.relabel.cadvisor.receiver]
    }

    prometheus.relabel "cadvisor" {
      rule {
        source_labels = ["__name__"]
        regex = "up|kubelet_node_name|kubelet_running_pods|kubelet_running_containers|kubelet_pod_start_duration_seconds_bucket"
        action = "keep"
      }

      forward_to = [prometheus.remote_write.prometheus.receiver]
    }

    // Kubelet
    // -------
    discovery.relabel "metrics_kubelet" {
      targets = discovery.kubernetes.nodes.targets

      rule {
        action = "replace"
        target_label = "__address__"
        replacement = "kubernetes.default.svc.cluster.local:443"
      }

      rule {
        source_labels = ["__meta_kubernetes_node_name"]
        regex = "(.+)"
        action = "replace"
        replacement = "/api/v1/nodes/${1}/proxy/metrics"
        target_label = "__metrics_path__"
      }
    }

    prometheus.scrape "kubelet" {
      scheme = "https"
      tls_config {
          server_name = "kubernetes"
          ca_file = "/var/run/secrets/kubernetes.io/serviceaccount/ca.crt"
          insecure_skip_verify = false
      }
      bearer_token_file = "/var/run/secrets/kubernetes.io/serviceaccount/token"
      targets = discovery.relabel.metrics_kubelet.output
      scrape_interval = "60s"
      forward_to = [prometheus.relabel.kubelet.receiver]
    }

    prometheus.relabel "kubelet" {
      rule {
        source_labels = ["__name__"]
        regex = "up|kubelet_node_name|kubelet_running_pods|kubelet_running_containers|kubelet_pod_start_duration_seconds_bucket"
        action = "keep"
      }

      forward_to = [prometheus.remote_write.prometheus.receiver]
    }

    // Kube State Metrics
    // ------------------
    discovery.relabel "metrics_kube_state_metrics" {
      targets = discovery.kubernetes.pods.targets

      rule {
        source_labels = ["__meta_kubernetes_pod_label_app_kubernetes_io_name"]
        regex = "kube-state-metrics"
        action = "keep"
      }
    }

    prometheus.scrape "kube_state_metrics" {
      targets = discovery.relabel.metrics_kube_state_metrics.output
      scrape_interval = "60s"
      forward_to = [prometheus.relabel.metrics_kube_state_metrics.receiver]
    }

    prometheus.relabel "metrics_kube_state_metrics" {
      rule {
        source_labels = ["__name__"]
        regex = "up|kubelet_node_name|kubelet_running_pods|kubelet_running_containers|kubelet_pod_start_duration_seconds_bucket"
        action = "keep"
      }

      forward_to = [prometheus.remote_write.prometheus.receiver]
    }

    // Node Exporter
    // -------------
    discovery.relabel "metrics_node_exporter" {
      targets = discovery.kubernetes.pods.targets

      rule {
        source_labels = ["__meta_kubernetes_pod_label_app_kubernetes_io_name"]
        regex = "prometheus-node-exporter.*"
        action = "keep"
      }

      rule {
        source_labels = ["__meta_kubernetes_pod_node_name"]
        action = "replace"
        target_label = "instance"
      }

      rule {
        source_labels = ["__meta_kubernetes_namespace"]
        action = "replace"
        target_label = "namespace"
      }
    }

    prometheus.scrape "node_exporter" {
      targets = discovery.relabel.metrics_node_exporter.output
      scrape_interval = "60s"
      forward_to = [prometheus.relabel.metrics_node_exporter.receiver]
    }

    prometheus.relabel "metrics_node_exporter" {
      rule {
        source_labels = ["__name__"]
        regex = "up|kubelet_node_name|kubelet_running_pods|kubelet_running_containers|kubelet_pod_start_duration_seconds_bucket"
        action = "keep"
      }

      forward_to = [prometheus.remote_write.prometheus.receiver]
    }

    // Write
    // -----
    prometheus.remote_write "prometheus" {
      endpoint {
        url = env("PROMETHEUS_URL")
        basic_auth {
          username = env("PROMETHEUS_USERNAME")
          password = env("PROMETHEUS_PASSWORD")
        }
      }

      external_labels = {
        cluster = "platform",
      }
    }

    // Traces
    // ------
    otelcol.receiver.otlp "traces" {
      http {}

      output {
        traces  = [otelcol.processor.batch.traces.input]
      }
    }

    otelcol.processor.batch "traces" {
      output {
        traces = [otelcol.exporter.otlp.tempo.input]
      }
    }

    otelcol.auth.basic "tempo" {
      username = env("TEMPO_USERNAME")
      password = env("TEMPO_PASSWORD")
    }

    otelcol.exporter.otlp "tempo" {
      client {
        endpoint = env("TEMPO_URL")
        auth = otelcol.auth.basic.tempo.handler
      }
    }
kind: ConfigMap
metadata:
  name: grafana-agent-config
  namespace: monitoring
